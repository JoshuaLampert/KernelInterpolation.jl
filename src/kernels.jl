"""
    AbstractKernel

An abstract supertype of kernels.
"""
abstract type AbstractKernel{Dim} end

"""
    dim(k)

Return the dimension of a kernel, i.e. the size of the input vector.
"""
dim(k::AbstractKernel{Dim}) where {Dim} = Dim

@doc raw"""
    RadialSymmetricKernel

An abstract supertype of radial symmetric kernels. Radial symmetric
kernels are generated by an even and continuous function
``\Phi: \mathrm{R}^d\to\mathrm{R}``, which is radial-symmetric meaning that
there exists a ``\phi:\mathrm{R}\to\mathrm{R}`` such that
``` math
    \Phi(x) = \phi(\Vert x\Vert).
```
The kernel is then defined by
```math
    K(x, y) = \Phi(x - y).
```
"""
abstract type RadialSymmetricKernel{Dim} <: AbstractKernel{Dim} end

Phi(k::RadialSymmetricKernel, x) = phi(k, norm(x))

function (k::RadialSymmetricKernel{Dim})(x, y) where {Dim}
    @assert length(x) == length(y)
    @assert length(x) == Dim
    return Phi(k, x .- y)
end

@doc raw"""
    GaussKernel{Dim}(; shape_parameter = 1.0)

Gaussian kernel function with
```math
    \phi(r) = \exp(-(\varepsilon * r)^2),
```
where ``\varepsilon`` is the shape parameter. The Gaussian kernel
is always positive definite.

See also [`RadialSymmetricKernel`](@ref).
"""
struct GaussKernel{Dim, RealT} <: RadialSymmetricKernel{Dim}
    shape_parameter::RealT
end

function GaussKernel{Dim}(; shape_parameter = 1.0) where {Dim}
    GaussKernel{Dim, typeof(shape_parameter)}(shape_parameter)
end

function Base.show(io::IO, k::GaussKernel{Dim}) where {Dim}
    return print(io, "GaussKernel{", Dim, "}(shape_parameter = ", k.shape_parameter, ")")
end

phi(k::GaussKernel, r::Real) = exp(-(k.shape_parameter * r)^2)
order(k::GaussKernel) = 0

@doc raw"""
    MultiquadricKernel{Dim}(beta = 0.5; shape_parameter = 1.0)

Multiquadric kernel function with
```math
    \phi(r) = (1 + (\varepsilon * r)^2)^\beta,
```
where ``\varepsilon`` is the shape parameter. The multiquadric kernel
is conditionally positive definite of order ``m = \lceil\beta \rceil``.

See also [`RadialSymmetricKernel`](@ref).
"""
struct MultiquadricKernel{Dim, RealT} <: RadialSymmetricKernel{Dim}
    beta::RealT
    shape_parameter::RealT
end

function MultiquadricKernel{Dim}(beta = 0.5; shape_parameter = 1.0) where {Dim}
    MultiquadricKernel{Dim, typeof(shape_parameter)}(beta, shape_parameter)
end

function Base.show(io::IO, k::MultiquadricKernel{Dim}) where {Dim}
    return print(io, "MultiquadricKernel{", Dim, "}(shape_parameter = ", k.shape_parameter,
                 ")")
end

phi(k::MultiquadricKernel, r::Real) = (1 + (k.shape_parameter * r)^2)^k.beta
order(k::MultiquadricKernel) = ceil(k.beta)

@doc raw"""
    InverseMultiquadricKernel{Dim}(beta = 0.5; shape_parameter = 1.0)

Inverse multiquadric kernel function with
```math
    \phi(r) = (1 + (\varepsilon * r)^2)^{-\beta},
```
where ``\varepsilon`` is the shape parameter. The inverse multiquadric kernel
is always positive definite.

See also [`RadialSymmetricKernel`](@ref).
"""
struct InverseMultiquadricKernel{Dim, RealT} <: RadialSymmetricKernel{Dim}
    beta::RealT
    shape_parameter::RealT
end

function InverseMultiquadricKernel{Dim}(beta = 0.5; shape_parameter = 1.0) where {Dim}
    InverseMultiquadricKernel{Dim, typeof(shape_parameter)}(beta, shape_parameter)
end

function Base.show(io::IO, k::InverseMultiquadricKernel{Dim}) where {Dim}
    return print(io, "InverseMultiquadricKernel{", Dim, "}(beta = ", k.beta,
                 ", shape_parameter = ",
                 k.shape_parameter, ")")
end

phi(k::InverseMultiquadricKernel, r::Real) = (1 + (k.shape_parameter * r)^2)^(-k.beta)
order(k::InverseMultiquadricKernel) = 0

@doc raw"""
    RadialCharacteristicKernel{Dim}(beta = 2.0; shape_parameter = 1.0)

Radial characteristic function kernel function with
```math
    \phi(r) = (1 - (\varepsilon * r)^2)^\beta_+,
```
where ``\varepsilon`` is the shape parameter. The radial characteristic function is
positive definite if ``\beta\ge (d + 1)/2``.

See also [`RadialSymmetricKernel`](@ref).
"""
struct RadialCharacteristicKernel{Dim, RealT} <: RadialSymmetricKernel{Dim}
    beta::RealT
    shape_parameter::RealT
end

function RadialCharacteristicKernel{Dim}(beta = 2.0; shape_parameter = 1.0) where {Dim}
    RadialCharacteristicKernel{Dim, typeof(shape_parameter)}(beta, shape_parameter)
end

function Base.show(io::IO, k::RadialCharacteristicKernel{Dim}) where {Dim}
    return print(io, "RadialCharacteristicKernel{", Dim, "}(beta = ", k.beta,
                 ", shape_parameter = ",
                 k.shape_parameter, ")")
end

phi(k::RadialCharacteristicKernel, r::Real) = max(0, 1 - k.shape_parameter * r)^k.beta
order(k::RadialCharacteristicKernel{Dim}) where {Dim} = k.beta > (Dim + 1) / 2 ? 0 : Inf

@doc raw"""
    PolyharmonicSplineKernel{Dim}(k)

Polyharmonic spline kernel function with
```math
    \phi(r) = \begin{cases}
        r^k, &\text{ if } k \text{ odd}\\
        r^k\log(r), &\text{ if } k \text{ even}
    \end{cases}.
```
The polyharmonic spline is conditionally positive definite of order ``m = \lceil k/2\rceil``
for odd `k` and order ``m = k/2 + 1`` for even `k`.

See also [`RadialSymmetricKernel`](@ref).
"""
struct PolyharmonicSplineKernel{Dim} <: RadialSymmetricKernel{Dim}
    exponent::Int
end

function Base.show(io::IO, k::PolyharmonicSplineKernel{Dim}) where {Dim}
    return print(io, "PolyharmonicSplineKernel{", Dim, "}(k = ", k.exponent, ")")
end

function phi(k::PolyharmonicSplineKernel, r::Real)
    if isodd(k.exponent)
        return r^k.exponent
    else
        return isapprox(r, 0.0) ? 0.0 : r^k.exponent * log(r)
    end
end

function order(k::PolyharmonicSplineKernel)
    isodd(k.exponent) ? ceil(k.exponent / 2) : ceil(k.exponent / 2) + 1
end

@doc raw"""
    ThinPlateSplineKernel{Dim}()

Thin plate spline kernel function with
```math
    \phi(r) = r^2\log(r),
```
i.e. [`PolyharmonicSplineKernel`](@ref) with ``k = 2``.
The thin plate spline is conditionally positive definite of order ``m = 2``.

See also [`RadialSymmetricKernel`](@ref).
"""
struct ThinPlateSplineKernel{Dim} <: RadialSymmetricKernel{Dim} end

function Base.show(io::IO, k::ThinPlateSplineKernel{Dim}) where {Dim}
    return print(io, "ThinPlateSplineKernel{", Dim, "}()")
end

phi(k::ThinPlateSplineKernel, r::Real) = isapprox(r, 0.0) ? 0.0 : r^2 * log(r)
order(k::ThinPlateSplineKernel) = 2
